"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formTriggerReducers = void 0;

var _redux = require("redux");

var _constants = _interopRequireDefault(require("../actions/formTrigger/constants"));

var _application = require("../constants/application.properties");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var currentFormTriggerInitialState = {
  data: {
    actions: [],
    description: '',
    form: '',
    is_active: true,
    is_async: false,
    name: '',
    on_create: false,
    on_update: false,
    qualification: {},
    sequence: '1'
  },
  isLoading: false
};
var listInitialState = {
  data: [],
  isLoading: false,
  limit: _application.AppProperties.TABLE_PROPS.LIMIT,
  total: 0
};
var sourceFieldInitialState = {
  data: [],
  isLoading: false
};
var targetFieldInitialState = {
  data: [],
  isLoading: false
};

var sourceFormFieldsReducer = function sourceFormFieldsReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : sourceFieldInitialState;
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case _constants.default.FETCH_SOURCE_FORM_FIELDS_REQUEST:
      return _objectSpread({}, state, {
        isLoading: true
      });

    case _constants.default.FETCH_SOURCE_FORM_FIELDS_SUCCESS:
      return _objectSpread({}, state, {
        data: action.data.map(function (source) {
          return {
            label: source,
            value: source
          };
        }),
        isLoading: false
      });

    case _constants.default.FETCH_SOURCE_FORM_FIELDS_FAILURE:
      return _objectSpread({}, state, {
        isLoading: false
      });

    default:
      return state;
  }
};

var targetFormFieldsReducer = function targetFormFieldsReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : targetFieldInitialState;
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case _constants.default.FETCH_TARGET_FORM_FIELDS_REQUEST:
      return _objectSpread({}, state, {
        isLoading: true
      });

    case _constants.default.FETCH_TARGET_FORM_FIELDS_SUCCESS:
      return _objectSpread({}, state, {
        data: action.data.map(function (source) {
          return {
            label: source,
            value: source
          };
        }),
        isLoading: false
      });

    case _constants.default.FETCH_TARGET_FORM_FIELDS_FAILURE:
      return _objectSpread({}, state, {
        isLoading: false
      });

    default:
      return state;
  }
};

var formTriggerReducer = function formTriggerReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : currentFormTriggerInitialState;
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case _constants.default.CREATE_FORM_TRIGGER_REQUEST:
      return _objectSpread({}, state, {
        isLoading: true
      });

    case _constants.default.CREATE_FORM_TRIGGER_SUCCESS:
      return _objectSpread({}, state, {
        formSchema: action.payload,
        isLoading: false
      });

    case _constants.default.CREATE_FORM_TRIGGER_FAILURE:
      return _objectSpread({}, state, {
        isLoading: false
      });

    case _constants.default.FETCH_FORM_TRIGGER_REQUEST:
      return _objectSpread({}, state, {
        isLoading: true
      });

    case _constants.default.FETCH_FORM_TRIGGER_SUCCESS:
      return _objectSpread({}, state, {
        data: _objectSpread({}, action.data),
        isLoading: false
      });

    case _constants.default.FETCH_FORM_TRIGGER_FAILURE:
      return _objectSpread({}, state, {
        isLoading: false
      });

    case _constants.default.SAVE_FORM_TRIGGER_REQUEST:
      return _objectSpread({}, state, {
        isLoading: true
      });

    case _constants.default.SAVE_FORM_TRIGGER_SUCCESS:
      return _objectSpread({}, state, currentFormTriggerInitialState);

    case _constants.default.SAVE_FORM_TRIGGER_FAILURE:
      return _objectSpread({}, state, {
        isLoading: false
      });

    case _constants.default.UPDATE_FORM_TRIGGER_STATE:
      return _objectSpread({}, state, {
        data: action.data ? _objectSpread({}, action.data) : currentFormTriggerInitialState.data,
        isLoading: false
      });

    case _constants.default.CLEAR_FORM_TRIGGER_DATA:
      return {
        data: _objectSpread({}, currentFormTriggerInitialState.data, {
          actions: []
        })
      };

    default:
      return state;
  }
};

var formTriggerListReducer = function formTriggerListReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : listInitialState;
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case _constants.default.FETCH_FORM_TRIGGER_LIST_REQUEST:
      return _objectSpread({}, state, {
        isLoading: false
      });

    case _constants.default.FETCH_FORM_TRIGGER_LIST_FAILURE:
      return _objectSpread({}, state, {
        isLoading: false
      });

    case _constants.default.FETCH_FORM_TRIGGER_LIST_SUCCESS:
      return _objectSpread({}, state, {
        data: action.data.data,
        isLoading: false,
        total: action.data.total
      });

    default:
      return state;
  }
};

var formTriggerReducers = (0, _redux.combineReducers)({
  list: formTriggerListReducer,
  sourceFormFields: sourceFormFieldsReducer,
  targetFormFields: targetFormFieldsReducer,
  trigger: formTriggerReducer
});
exports.formTriggerReducers = formTriggerReducers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,