"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactLocalizeRedux = require("react-localize-redux");

var _redux = require("redux");

var _appform = require("./appform");

var _config = require("./config");

var _counter = require("./counter");

var _dynamicTable = _interopRequireDefault(require("./dynamicTable"));

var _emailTemplate = require("./emailTemplate");

var _formfielddata = require("./formfielddata");

var _formschema = require("./formschema");

var _formTrigger = require("./formTrigger");

var _global = require("./global");

var _graphiQl = require("./graphiQl");

var _organization = require("./organization");

var _querybuilder = require("./querybuilder");

var _role = require("./role");

var _rolepermission = require("./rolepermission");

var _theme = require("./theme");

var _user = require("./user");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var rootReducer = (0, _redux.combineReducers)({
  appForm: _appform.appFormReducer,
  config: _config.configReducer,
  counter: _counter.counterReducer,
  dynamicTable: _dynamicTable.default,
  emailTemplate: _emailTemplate.emailTemplateReducer,
  formFieldData: _formfielddata.formFieldDataReducers,
  formSchema: _formschema.formSchemaReducers,
  formTrigger: _formTrigger.formTriggerReducers,
  global: _global.globalReducer,
  graphiQl: _graphiQl.graphiQlReducer,
  localize: _reactLocalizeRedux.localizeReducer,
  organization: _organization.organizationReducers,
  queryBuilder: _querybuilder.queryBuilderReducer,
  role: _role.roleReducers,
  rolePermission: _rolepermission.rolePermissionReducer,
  theme: _theme.themeReducer,
  user: _user.userReducer
});
var _default = rootReducer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZWR1Y2Vycy9pbmRleC50cyJdLCJuYW1lcyI6WyJyb290UmVkdWNlciIsImFwcEZvcm0iLCJhcHBGb3JtUmVkdWNlciIsImNvbmZpZyIsImNvbmZpZ1JlZHVjZXIiLCJjb3VudGVyIiwiY291bnRlclJlZHVjZXIiLCJkeW5hbWljVGFibGUiLCJkeW5hbWljVGFibGVSZWR1Y2VyIiwiZW1haWxUZW1wbGF0ZSIsImVtYWlsVGVtcGxhdGVSZWR1Y2VyIiwiZm9ybUZpZWxkRGF0YSIsImZvcm1GaWVsZERhdGFSZWR1Y2VycyIsImZvcm1TY2hlbWEiLCJmb3JtU2NoZW1hUmVkdWNlcnMiLCJmb3JtVHJpZ2dlciIsImZvcm1UcmlnZ2VyUmVkdWNlcnMiLCJnbG9iYWwiLCJnbG9iYWxSZWR1Y2VyIiwiZ3JhcGhpUWwiLCJncmFwaGlRbFJlZHVjZXIiLCJsb2NhbGl6ZSIsImxvY2FsaXplUmVkdWNlciIsIm9yZ2FuaXphdGlvbiIsIm9yZ2FuaXphdGlvblJlZHVjZXJzIiwicXVlcnlCdWlsZGVyIiwicXVlcnlCdWlsZGVyUmVkdWNlciIsInJvbGUiLCJyb2xlUmVkdWNlcnMiLCJyb2xlUGVybWlzc2lvbiIsInJvbGVQZXJtaXNzaW9uUmVkdWNlciIsInRoZW1lIiwidGhlbWVSZWR1Y2VyIiwidXNlciIsInVzZXJSZWR1Y2VyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxJQUFNQSxXQUE2QixHQUFHLDRCQUFnQjtBQUNwREMsRUFBQUEsT0FBTyxFQUFFQyx1QkFEMkM7QUFFcERDLEVBQUFBLE1BQU0sRUFBRUMscUJBRjRDO0FBR3BEQyxFQUFBQSxPQUFPLEVBQUVDLHVCQUgyQztBQUlwREMsRUFBQUEsWUFBWSxFQUFFQyxxQkFKc0M7QUFLcERDLEVBQUFBLGFBQWEsRUFBRUMsbUNBTHFDO0FBTXBEQyxFQUFBQSxhQUFhLEVBQUVDLG9DQU5xQztBQU9wREMsRUFBQUEsVUFBVSxFQUFFQyw4QkFQd0M7QUFRcERDLEVBQUFBLFdBQVcsRUFBRUMsZ0NBUnVDO0FBU3BEQyxFQUFBQSxNQUFNLEVBQUVDLHFCQVQ0QztBQVVwREMsRUFBQUEsUUFBUSxFQUFFQyx5QkFWMEM7QUFXcERDLEVBQUFBLFFBQVEsRUFBRUMsbUNBWDBDO0FBWXBEQyxFQUFBQSxZQUFZLEVBQUVDLGtDQVpzQztBQWFwREMsRUFBQUEsWUFBWSxFQUFFQyxpQ0Fic0M7QUFjcERDLEVBQUFBLElBQUksRUFBRUMsa0JBZDhDO0FBZXBEQyxFQUFBQSxjQUFjLEVBQUVDLHFDQWZvQztBQWdCcERDLEVBQUFBLEtBQUssRUFBRUMsbUJBaEI2QztBQWlCcERDLEVBQUFBLElBQUksRUFBRUM7QUFqQjhDLENBQWhCLENBQXRDO2VBbURlbEMsVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJvdXRlclN0YXRlIH0gZnJvbSAnY29ubmVjdGVkLXJlYWN0LXJvdXRlcic7XG5pbXBvcnQgeyBsb2NhbGl6ZVJlZHVjZXIsIExvY2FsaXplU3RhdGUgfSBmcm9tICdyZWFjdC1sb2NhbGl6ZS1yZWR1eCc7XG5pbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMsIFJlZHVjZXIgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyBhcHBGb3JtUmVkdWNlciwgSUFwcEZvcm1SZWR1Y2VyIH0gZnJvbSAnLi9hcHBmb3JtJztcbmltcG9ydCB7IGNvbmZpZ1JlZHVjZXIsIElDb25maWdSZWR1Y2VyIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgY291bnRlclJlZHVjZXIsIElDb3VudGVyUmVkdWNlciB9IGZyb20gJy4vY291bnRlcic7XG5pbXBvcnQgZHluYW1pY1RhYmxlUmVkdWNlciwgeyBJRGF0YVN0YXRlLCBJTWV0YVN0YXRlIH0gZnJvbSAnLi9keW5hbWljVGFibGUnO1xuaW1wb3J0IHsgZW1haWxUZW1wbGF0ZVJlZHVjZXIsIElFbWFpbFRlbXBsYXRlIH0gZnJvbSAnLi9lbWFpbFRlbXBsYXRlJztcbmltcG9ydCB7IGZvcm1GaWVsZERhdGFSZWR1Y2VycywgSUZvcm1GaWVsZERhdGFSZWR1Y2VyIH0gZnJvbSAnLi9mb3JtZmllbGRkYXRhJztcbmltcG9ydCB7IGZvcm1TY2hlbWFSZWR1Y2VycywgSUZvcm1TY2hlbWFSZWR1Y2VyIH0gZnJvbSAnLi9mb3Jtc2NoZW1hJztcbmltcG9ydCB7IGZvcm1UcmlnZ2VyUmVkdWNlcnMsIElGb3JtVHJpZ2dlclJlZHVjZXIgfSBmcm9tICcuL2Zvcm1UcmlnZ2VyJztcbmltcG9ydCB7IGdsb2JhbFJlZHVjZXIsIElHbG9iYWxSZWR1Y2VyIH0gZnJvbSAnLi9nbG9iYWwnO1xuaW1wb3J0IHsgZ3JhcGhpUWxSZWR1Y2VyLCBJR3JhcGhpUWxSZWR1Y2VyIH0gZnJvbSAnLi9ncmFwaGlRbCc7XG5pbXBvcnQgeyBJT3JnYW5pemF0aW9uUmVkdWNlciwgb3JnYW5pemF0aW9uUmVkdWNlcnMgfSBmcm9tICcuL29yZ2FuaXphdGlvbic7XG5pbXBvcnQgeyBJUXVlcnlCdWlsZGVyUmVkdWNlciB9IGZyb20gJy4vcXVlcnlidWlsZGVyJztcbmltcG9ydCB7IHF1ZXJ5QnVpbGRlclJlZHVjZXIgfSBmcm9tICcuL3F1ZXJ5YnVpbGRlcic7XG5pbXBvcnQgeyBJUm9sZVJlZHVjZXIsIHJvbGVSZWR1Y2VycyB9IGZyb20gJy4vcm9sZSc7XG5pbXBvcnQgeyBJUm9sZVBlcm1pc3Npb25SZWR1Y2VyLCByb2xlUGVybWlzc2lvblJlZHVjZXIgfSBmcm9tICcuL3JvbGVwZXJtaXNzaW9uJztcbmltcG9ydCB7IEl0aGVtZVJlZHVjZXIsIHRoZW1lUmVkdWNlciB9IGZyb20gJy4vdGhlbWUnO1xuaW1wb3J0IHsgSXVzZXJSZWR1Y2VyLCB1c2VyUmVkdWNlciB9IGZyb20gJy4vdXNlcic7XG5cbmNvbnN0IHJvb3RSZWR1Y2VyIDogUmVkdWNlcjxJU3RhdGU+ID0gY29tYmluZVJlZHVjZXJzKHtcbiAgYXBwRm9ybTogYXBwRm9ybVJlZHVjZXIsXG4gIGNvbmZpZzogY29uZmlnUmVkdWNlcixcbiAgY291bnRlcjogY291bnRlclJlZHVjZXIsXG4gIGR5bmFtaWNUYWJsZTogZHluYW1pY1RhYmxlUmVkdWNlcixcbiAgZW1haWxUZW1wbGF0ZTogZW1haWxUZW1wbGF0ZVJlZHVjZXIsXG4gIGZvcm1GaWVsZERhdGE6IGZvcm1GaWVsZERhdGFSZWR1Y2VycyxcbiAgZm9ybVNjaGVtYTogZm9ybVNjaGVtYVJlZHVjZXJzLFxuICBmb3JtVHJpZ2dlcjogZm9ybVRyaWdnZXJSZWR1Y2VycyxcbiAgZ2xvYmFsOiBnbG9iYWxSZWR1Y2VyLFxuICBncmFwaGlRbDogZ3JhcGhpUWxSZWR1Y2VyLFxuICBsb2NhbGl6ZTogbG9jYWxpemVSZWR1Y2VyIGFzIFJlZHVjZXI8YW55PixcbiAgb3JnYW5pemF0aW9uOiBvcmdhbml6YXRpb25SZWR1Y2VycyxcbiAgcXVlcnlCdWlsZGVyOiBxdWVyeUJ1aWxkZXJSZWR1Y2VyLFxuICByb2xlOiByb2xlUmVkdWNlcnMsXG4gIHJvbGVQZXJtaXNzaW9uOiByb2xlUGVybWlzc2lvblJlZHVjZXIsXG4gIHRoZW1lOiB0aGVtZVJlZHVjZXIsXG4gIHVzZXI6IHVzZXJSZWR1Y2VyXG59KTtcblxuXG5leHBvcnQgaW50ZXJmYWNlIElBY3Rpb25Qcm9wcyB7XG4gIHR5cGU6IHN0cmluZztcbiAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElTdGF0ZSB7XG4gIGNvdW50ZXI6IElDb3VudGVyUmVkdWNlcjtcbiAgZW1haWxUZW1wbGF0ZTogSUVtYWlsVGVtcGxhdGU7XG4gIGxvY2FsZTogTG9jYWxpemVTdGF0ZTtcbiAgZm9ybUZpZWxkRGF0YTogSUZvcm1GaWVsZERhdGFSZWR1Y2VyO1xuICBmb3JtU2NoZW1hOiBJRm9ybVNjaGVtYVJlZHVjZXI7XG4gIGZvcm1UcmlnZ2VyOiBJRm9ybVRyaWdnZXJSZWR1Y2VyO1xuICBsYW5ndWFnZVNlbGVjdGlvbjogYW55O1xuICByb3V0ZXI6IFJvdXRlclN0YXRlO1xuICBjb25maWc6IElDb25maWdSZWR1Y2VyO1xuICBhcHBGb3JtOiBJQXBwRm9ybVJlZHVjZXI7XG4gIG9yZ2FuaXphdGlvbjogSU9yZ2FuaXphdGlvblJlZHVjZXI7XG4gIGdyYXBoaVFsOiBJR3JhcGhpUWxSZWR1Y2VyO1xuICByb2xlOiBJUm9sZVJlZHVjZXI7XG4gIHF1ZXJ5QnVpbGRlcjogSVF1ZXJ5QnVpbGRlclJlZHVjZXI7XG4gIHJvbGVQZXJtaXNzaW9uOiBJUm9sZVBlcm1pc3Npb25SZWR1Y2VyO1xuICB0aGVtZTogSXRoZW1lUmVkdWNlcjtcbiAgdXNlcjogSXVzZXJSZWR1Y2VyO1xuICBnbG9iYWw6IElHbG9iYWxSZWR1Y2VyO1xuICBkeW5hbWljVGFibGU6IHtcbiAgICBkYXRhOiBJRGF0YVN0YXRlO1xuICAgIG1ldGE6IElNZXRhU3RhdGU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJvb3RSZWR1Y2VyO1xuIl19