"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formFieldDataReducers = void 0;

var _redux = require("redux");

var _constants = _interopRequireDefault(require("../actions/formfielddata/constants"));

var _application = require("../constants/application.properties");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var currentFormInitialState = {
  data: {},
  isLoading: false
};
var listInitialState = {
  data: [],
  isLoading: false,
  limit: _application.AppProperties.TABLE_PROPS.LIMIT,
  total: 0
};

var formFieldDataReducer = function formFieldDataReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : currentFormInitialState;
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case _constants.default.CREATE_FORM_FIELD_DATA_REQUEST:
      return _objectSpread({}, state, {
        isLoading: true
      });

    case _constants.default.CREATE_FORM_FIELD_DATA_SUCCESS:
      return _objectSpread({}, state, {
        formSchema: action.payload,
        isLoading: false
      });

    case _constants.default.CREATE_FORM_FIELD_DATA_FAILURE:
      return _objectSpread({}, state, {
        isLoading: false
      });

    case _constants.default.FETCH_FORM_FIELD_DATA_REQUEST:
      return _objectSpread({}, state, {
        isLoading: true
      });

    case _constants.default.FETCH_FORM_FIELD_DATA_SUCCESS:
      return _objectSpread({}, state, {
        data: _objectSpread({}, action.data),
        isLoading: false
      });

    case _constants.default.FETCH_FORM_FIELD_DATA_FAILURE:
      return _objectSpread({}, state, {
        data: {},
        isLoading: false
      });

    case _constants.default.SAVE_FORM_FIELD_DATA_REQUEST:
      return _objectSpread({}, state, {
        isLoading: true
      });

    case _constants.default.SAVE_FORM_FIELD_DATA_SUCCESS:
      return _objectSpread({}, state, {
        data: _objectSpread({}, action.data),
        isLoading: false
      });

    case _constants.default.SAVE_FORM_FIELD_DATA_FAILURE:
      return _objectSpread({}, state, {
        isLoading: false
      });

    case _constants.default.UPDATE_FORM_FIELD_DATA_STATE:
      return _objectSpread({}, state, {
        data: action.data ? action.data : currentFormInitialState.data,
        isLoading: false
      });

    default:
      return state;
  }
};

var formFieldDataListReducer = function formFieldDataListReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : listInitialState;
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case _constants.default.FETCH_FORM_FIELD_DATA_LIST_REQUEST:
      return _objectSpread({}, state, {
        isLoading: false
      });

    case _constants.default.FETCH_FORM_FIELD_DATA_LIST_FAILURE:
      return _objectSpread({}, state, {
        isLoading: false
      });

    case _constants.default.FETCH_FORM_FIELD_DATA_LIST_SUCCESS:
      return _objectSpread({}, state, {
        data: action.data.data,
        isLoading: false,
        total: action.data.total
      });

    default:
      return state;
  }
};

var formFieldDataReducers = (0, _redux.combineReducers)({
  list: formFieldDataListReducer,
  submission: formFieldDataReducer
});
exports.formFieldDataReducers = formFieldDataReducers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,