"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactBootstrapTable2Filter = require("react-bootstrap-table2-filter");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Column =
/**
 * Transform object to Column
 */
function Column() {
  var _this = this;

  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _key = _ref.key,
      _label = _ref.label,
      isActionColumn = _ref.isActionColumn,
      _isHidden = _ref.isHidden,
      _searchKey = _ref.searchKey,
      cellFormatter = _ref.cellFormatter,
      _unit = _ref.unit,
      sortable = _ref.sortable,
      _rowClass = _ref.rowClass,
      _onClick = _ref.onClick,
      _align = _ref.align,
      _headerFormatter = _ref.headerFormatter,
      _headerClass = _ref.headerClass,
      _type = _ref.type,
      _filterConfig = _ref.filterConfig,
      isFilterable = _ref.isFilterable;

  _classCallCheck(this, Column);

  _defineProperty(this, "isHidden", void 0);

  _defineProperty(this, "searchKey", void 0);

  _defineProperty(this, "type", void 0);

  _defineProperty(this, "key", void 0);

  _defineProperty(this, "label", void 0);

  _defineProperty(this, "isActionColumn", void 0);

  _defineProperty(this, "cellFormatter", void 0);

  _defineProperty(this, "unit", void 0);

  _defineProperty(this, "sortable", void 0);

  _defineProperty(this, "rowClass", void 0);

  _defineProperty(this, "onClick", void 0);

  _defineProperty(this, "align", void 0);

  _defineProperty(this, "headerFormatter", void 0);

  _defineProperty(this, "headerClass", void 0);

  _defineProperty(this, "filterConfig", void 0);

  _defineProperty(this, "isFilterable", void 0);

  _defineProperty(this, "withKey", function (key) {
    _this.key = key;
    _this.searchKey = key;
    return _this;
  });

  _defineProperty(this, "withLabel", function (label) {
    _this.label = label;
    return _this;
  });

  _defineProperty(this, "getKey", function () {
    return _this.key;
  });

  _defineProperty(this, "getLabel", function () {
    return _this.label;
  });

  _defineProperty(this, "enableFilter", function () {
    _this.isFilterable = true;
    return _this;
  });

  _defineProperty(this, "ofType", function (type) {
    _this.type = type;
    return _this;
  });

  _defineProperty(this, "asActionColumn", function () {
    _this.isActionColumn = true;
    return _this;
  });

  _defineProperty(this, "markAsHidden", function (isHidden) {
    _this.isHidden = isHidden;
    return _this;
  });

  _defineProperty(this, "withCellFormatter", function (cellformatter) {
    _this.cellFormatter = cellformatter;
    return _this;
  });

  _defineProperty(this, "withUnit", function (unit) {
    _this.unit = unit;
    return _this;
  });

  _defineProperty(this, "asSortable", function () {
    _this.sortable = true;
    return _this;
  });

  _defineProperty(this, "withRowClass", function (rowClass) {
    _this.rowClass = rowClass;
    return _this;
  });

  _defineProperty(this, "withClickHandler", function (onClick) {
    _this.onClick = onClick;
    return _this;
  });

  _defineProperty(this, "withAlign", function (align) {
    _this.align = align;
    return _this;
  });

  _defineProperty(this, "withHeaderFormatter", function (headerFormatter) {
    _this.headerFormatter = headerFormatter;
    return _this;
  });

  _defineProperty(this, "withHeaderClass", function (headerClass) {
    _this.headerClass = headerClass;
    return _this;
  });

  _defineProperty(this, "withFilterConfig", function (filterConfig) {
    _this.filterConfig = filterConfig;
    return _this;
  });

  _defineProperty(this, "withSearchKey", function (searchKey) {
    _this.searchKey = searchKey;
    return _this;
  });

  _defineProperty(this, "getFilterForType", function () {
    if (_this.type === Column.COLUMN_TYPES.TEXT) {
      return (0, _reactBootstrapTable2Filter.textFilter)(_this.filterConfig);
    } else if (_this.type === Column.COLUMN_TYPES.NUMBER) {
      return (0, _reactBootstrapTable2Filter.numberFilter)(_this.filterConfig);
    } else if (_this.type === Column.COLUMN_TYPES.DATE) {
      return (0, _reactBootstrapTable2Filter.dateFilter)(_this.filterConfig);
    } else if (_this.type === Column.COLUMN_TYPES.SELECT) {
      return (0, _reactBootstrapTable2Filter.selectFilter)(_this.filterConfig);
    }

    return null;
  });

  _defineProperty(this, "convertToBootstrapTableColumn", function () {
    var defaultColumn = {
      align: _this.align,
      classes: _this.rowClass,
      csvExport: !_this.isHidden,
      dataField: _this.key,
      events: {
        onClick: _this.onClick
      },
      formatExtraData: _this.unit,
      formatter: _this.cellFormatter,
      headerAlign: _this.align,
      headerClasses: _this.headerClass,
      headerEvents: {
        onClick: _this.onClick
      },
      headerFormatter: _this.headerFormatter,
      hidden: _this.isHidden,
      isDummyField: _this.isActionColumn,
      searchKey: _this.searchKey,
      sort: _this.sortable,
      text: _this.label,
      type: _this.type
    };

    if (_this.isFilterable && _this.type !== Column.COLUMN_TYPES.NONE) {
      defaultColumn = Object.assign({}, defaultColumn, {
        filter: _this.getFilterForType()
      });
    }

    return defaultColumn;
  });

  this.key = _key || '';
  this.label = _label || '';
  this.isActionColumn = isActionColumn || false;
  this.isHidden = _isHidden || false;
  this.searchKey = _searchKey || '';
  this.cellFormatter = cellFormatter ? cellFormatter : function (cell, row, rowIndex, formatExtraData) {
    return cell;
  };
  this.unit = _unit || '';
  this.sortable = sortable || false;
  this.rowClass = _rowClass || '';
  this.onClick = _onClick ? _onClick : function (e) {
    e.preventDefault();
  };
  this.align = _align || 'left';
  this.headerFormatter = _headerFormatter ? _headerFormatter : function (column, colIndex, components) {
    return React.createElement("div", null, column.text, components.sortElement, components.filterElement);
  };
  this.headerClass = _headerClass || '';
  this.type = _type || Column.COLUMN_TYPES.NONE;
  this.filterConfig = _filterConfig || {};
  this.isFilterable = isFilterable || false;
}
/**
 * Add data identifier (i.e dataField) to Column
 * NOTE: Mandatory
 * @param key
 */
;

exports.default = Column;

_defineProperty(Column, "COLUMN_TYPES", {
  DATE: 'DATE',
  NONE: 'NONE',
  NUMBER: 'NUMBER',
  SELECT: 'SELECT',
  TEXT: 'TEXT'
});

_defineProperty(Column, "convertObjectToColumn", function (col) {
  var columnDef = new Column().withKey(col.key).withLabel(col.name);

  if (col.enableSort) {
    columnDef.asSortable();
  }

  if (col.type) {
    if (col.filterable) {
      columnDef.enableFilter();
    }

    columnDef.ofType(col.type);

    if (col.type === Column.COLUMN_TYPES.SELECT) {
      var options = col.options;

      if (col.textField && col.valueField) {
        options = col.options.reduce(function (accumulator, option) {
          return Object.assign({}, accumulator, _defineProperty({}, option[col.valueField], option[col.textField]));
        }, {});
      }

      columnDef.withFilterConfig({
        options: options
      });
    }
  }

  return columnDef;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,